name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - v[0-9]+.*

jobs:
  build-assets:
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            container: 'archlinux'
            format: pacman
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            container: ''
            format: deb
          - target: x86_64-apple-darwin
            os: macos-latest
            format: dmg
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            format: wix
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup apt Packages
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.container == '' }}
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libgtk-3-dev libxdo-dev libayatana-appindicator3-dev libxcb1 libxrandr2 libdbus-1-3
          version: 1.0
      
      - name: Setup pacman Packages
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.container == 'archlinux' }}
        run: |
          pacman -Syyu --noconfirm base-devel gtk3 xdotool libayatana-appindicator libxcb libxrandr dbus

      - name: Setup Windows
        if: matrix.os == 'windows-latest'
        run: |
          dotnet tool install --global wix
          $base64Cert = '${{ secrets.WINDOWS_CERT }}'
          [System.IO.File]::WriteAllBytes("certificate.pfx", [System.Convert]::FromBase64String($base64Cert))
          $password = ConvertTo-SecureString -String '${{ secrets.WINDOWS_CERT_PASSWORD }}' -Force -AsPlainText
          Import-PfxCertificate -FilePath 'certificate.pfx' -CertStoreLocation 'Cert:\\CurrentUser\\My' -Password $password

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Build binary
        run: |
          cargo build --release

      - name: Install cargo-packager
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-packager
      
      - name: Package binary
        run: |
          cargo packager --release --formats ${{ matrix.format }} -v

      - name: Upload .msi to artifacts
        uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest'
        with:
          name: msi
          path: |
            target/packages/*.msi

      - name: Upload .deb to artifacts
        uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.container == '' }}
        with:
          name: deb
          path: |
            target/packages/*.deb

      - name: Upload .tar.gz to artifacts
        uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.container == 'archlinux' }}
        with:
          name: tar
          path: |
            target/packages/*.tar.gz
            target/packages/PKGBUILD

      - name: Upload .dmg to artifacts
        uses: actions/upload-artifact@v4
        if: matrix.os == 'macos-latest'
        with:
          name: dmg
          path: |
            target/packages/*.dmg

  after-build-job:
    needs: build-assets
    runs-on: 'ubuntu-latest'
    container: 'archlinux'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update CHANGELOG
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: ${{ github.ref_name }}
      
      - name: Download Artifact
        uses: actions/download-artifact@v4
        
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.event.head_commit.message }}
          body: |
            ${{ steps.changelog.outputs.changes }}
          files: |
            msi/*
            deb/*
            tar/*.tar.gz
            dmg/*
          draft: false
          prerelease: false

      - name: Update PKGBUILD and .SRCINFO
        run: |
          pacman -Syyu --noconfirm openssh git
          mkdir -p ~/.ssh
          echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" > ~/.ssh/aur
          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/aur
          echo -e "Host aur.archlinux.org\n  IdentityFile ~/.ssh/aur\n  User aur" > ~/.ssh/config
          ssh-keyscan -H aur.archlinux.org >> ~/.ssh/known_hosts
          git config --global user.name "${{ secrets.AUR_USERNAME }}"
          git config --global user.email "${{ secrets.AUR_EMAIL }}"
          git clone ssh://aur@aur.archlinux.org/capter.git
          cp -rf tar/PKGBUILD capter/PKGBUILD
          cd capter
          rm .SRCINFO
          makepkg --nodeps --nobuild --printsrcinfo > .SRCINFO
          git add PKGBUILD .SRCINFO
          git commit -m "update: ${{ github.ref_name }}" || echo "No changes !!"
          git push --force
          echo "AUR Updated !!"
